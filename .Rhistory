# coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
theme_nothing() +
theme(panel.grid.major = element_line(colour = bg),
plot.background = element_rect(fill = bg),
axis.text = element_blank(),
axis.ticks.length=unit(0, "null"),
# plot.margin=unit(c(-10,-10,-10,-10),NULL),
panel.ontop = F
) +
labs(x = NULL, y = NULL) +
# no label box
if(add_label_box==F){geom_richtext(data=city_df,aes(lon,lat,label=city,family=city_label_font,hjust=hjust,vjust=vjust), color=path_col, size = city_label_size, fill = NA, label.color = NA, nudge_x = city_df$nudge_x,nudge_y = city_df$nudge_y)
# add label box
}else{
geom_richtext(data=city_df,aes(lon,lat,label=city,family=city_label_font,size=city_label_size, color=path_col,hjust=hjust,vjust=vjust), size = city_label_size, fill = "white", color = path_col, label.color = path_col, label.padding = grid::unit(rep(7.5, 4), "pt"),nudge_x = city_df$nudge_x,nudge_y = city_df$nudge_y)
}
if(plot_country_labels==T){ # add country labels
p <- p + geom_text(data= world_points,aes(x=X, y=Y, label=name, family=country_label_font),color = country_label_colour, size = country_label_size, check_overlap = T)
}
p
dev.off()
source("funcs/user_read_func.R") # load user and map details
source("funcs/page_print_dims.R") # load user and map details
source("funcs/title_xy.R") # load user and map details
graphics.off()
# bbox[1:2] %>% diff
# bbox[3:4] %>% diff
print_func(paper_size,orientation) # print func
# set bbox
# xybuff <- 0 # xybuff for page width/length
# if(orientation=="l"){
#   bbox <- city_df %>% summarise(min(lon)-(xybuff),max(lon)+(xybuff), # addbuffer
#                                 min(lat)-xybuff,max(lat)+xybuff,
#                                 median(c(lat,lon))) %>% unlist
# }else{
#   bbox <- city_df %>% summarise(min(lon)-(xybuff*2),max(lon)+(xybuff * 2), # add buffer
#                                 min(lat)-(xybuff),max(lat)+(xybuff),
#                                 median(c(lat,lon))) %>% unlist
# }
if(orientation=="l"){
bbox <- city_df %>% summarise(mean(lon)-(height/2), # x axis
mean(lon)+(height/2),
mean(lat)-(width/2),
mean(lat)+(width/2)) %>% unlist
}else{
bbox <- city_df %>% summarise(mean(lon)-(width/2), # x axis
mean(lon)+(width/2),
mean(lat)-(height/2),
mean(lat)+(height/2)) %>% unlist
}
# title and subtitle position // title_xy.R
map_title_final <- title_xy_func(title_xy,0,2)
# color palette
# https://studio.mapbox.com/styles/darwinanddavis/cjx3sqa8obnpg1ctdcx5mxan8/edit/#11.15/46.2378/6.1383
# recover default plot margins
theme_nothing()$plot.margin
p <- ggplot() +
geom_polygon(data=usa,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_sf(data=path,color=path_col,size=path_size) + # add path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
# geom_richtext(data=map_title_final,aes(tx,ty,label=title,hjust=hjust,vjust=vjust),color=map_title_colour, family=map_title_font, size = map_title_size, fill = NA, label.color = NA) + # map title
# geom_richtext(data=map_title_final,aes(tx,ty,label=subtitle,hjust=hjust,vjust=vjust),color=map_title_colour, family=map_title_font, size = map_title_size-10, fill = NA, label.color = NA,nudge_y = -1.5) + # map subtitle
# coord_map("mollweide",xlim = c(bbox[1],bbox[2]), ylim = c(bbox[3],bbox[4])) +
coord_sf(xlim = c(bbox[1],bbox[2]), ylim = c(bbox[3],bbox[4])) + # bbox
# coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
theme_nothing() +
theme(panel.grid.major = element_line(colour = bg),
plot.background = element_rect(fill = bg),
axis.text = element_blank(),
axis.ticks.length=unit(0, "null"),
# plot.margin=unit(c(-10,-10,-10,-10),NULL),
panel.ontop = F
) +
labs(x = NULL, y = NULL) +
# no label box
if(add_label_box==F){geom_richtext(data=city_df,aes(lon,lat,label=city,family=city_label_font,hjust=hjust,vjust=vjust), color=path_col, size = city_label_size, fill = NA, label.color = NA, nudge_x = city_df$nudge_x,nudge_y = city_df$nudge_y)
# add label box
}else{
geom_richtext(data=city_df,aes(lon,lat,label=city,family=city_label_font,size=city_label_size, color=path_col,hjust=hjust,vjust=vjust), size = city_label_size, fill = "white", color = path_col, label.color = path_col, label.padding = grid::unit(rep(7.5, 4), "pt"),nudge_x = city_df$nudge_x,nudge_y = city_df$nudge_y)
}
if(plot_country_labels==T){ # add country labels
p <- p + geom_text(data= world_points,aes(x=X, y=Y, label=name, family=country_label_font),color = country_label_colour, size = country_label_size, check_overlap = T)
}
p
dev.off()
source("funcs/user_read_func.R") # load user and map details
source("funcs/page_print_dims.R") # load user and map details
source("funcs/title_xy.R") # load user and map details
graphics.off()
# bbox[1:2] %>% diff
# bbox[3:4] %>% diff
print_func(paper_size,orientation) # print func
# set bbox
# xybuff <- 0 # xybuff for page width/length
# if(orientation=="l"){
#   bbox <- city_df %>% summarise(min(lon)-(xybuff),max(lon)+(xybuff), # addbuffer
#                                 min(lat)-xybuff,max(lat)+xybuff,
#                                 median(c(lat,lon))) %>% unlist
# }else{
#   bbox <- city_df %>% summarise(min(lon)-(xybuff*2),max(lon)+(xybuff * 2), # add buffer
#                                 min(lat)-(xybuff),max(lat)+(xybuff),
#                                 median(c(lat,lon))) %>% unlist
# }
if(orientation=="l"){
bbox <- city_df %>% summarise(mean(lon)-(height/2), # x axis
mean(lon)+(height/2),
mean(lat)-(width/2),
mean(lat)+(width/2)) %>% unlist
}else{
bbox <- city_df %>% summarise(mean(lon)-(width/2), # x axis
mean(lon)+(width/2),
mean(lat)-(height/2),
mean(lat)+(height/2)) %>% unlist
}
# title and subtitle position // title_xy.R
map_title_final <- title_xy_func(title_xy,0,2)
# color palette
# https://studio.mapbox.com/styles/darwinanddavis/cjx3sqa8obnpg1ctdcx5mxan8/edit/#11.15/46.2378/6.1383
# recover default plot margins
theme_nothing()$plot.margin
p <- ggplot() +
geom_polygon(data=usa,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_sf(data=path,color=path_col,size=path_size) + # add path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
# geom_richtext(data=map_title_final,aes(tx,ty,label=title,hjust=hjust,vjust=vjust),color=map_title_colour, family=map_title_font, size = map_title_size, fill = NA, label.color = NA) + # map title
# geom_richtext(data=map_title_final,aes(tx,ty,label=subtitle,hjust=hjust,vjust=vjust),color=map_title_colour, family=map_title_font, size = map_title_size-10, fill = NA, label.color = NA,nudge_y = -1.5) + # map subtitle
# coord_map("mollweide",xlim = c(bbox[1],bbox[2]), ylim = c(bbox[3],bbox[4])) +
coord_sf(xlim = c(bbox[1],bbox[2]), ylim = c(bbox[3],bbox[4])) + # bbox
# coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
theme_nothing() +
theme(panel.grid.major = element_line(colour = bg),
plot.background = element_rect(fill = bg),
axis.text = element_blank(),
axis.ticks.length=unit(0, "null"),
# plot.margin=unit(c(-10,-10,-10,-10),NULL),
panel.ontop = F
) +
labs(x = NULL, y = NULL) +
# no label box
if(add_label_box==F){geom_richtext(data=city_df,aes(lon,lat,label=city,family=city_label_font,hjust=hjust,vjust=vjust), color=path_col, size = city_label_size, fill = NA, label.color = NA, nudge_x = city_df$nudge_x,nudge_y = city_df$nudge_y)
# add label box
}else{
geom_richtext(data=city_df,aes(lon,lat,label=city,family=city_label_font,size=city_label_size, color=path_col,hjust=hjust,vjust=vjust), size = city_label_size, fill = "white", color = path_col, label.color = path_col, label.padding = grid::unit(rep(7.5, 4), "pt"),nudge_x = city_df$nudge_x,nudge_y = city_df$nudge_y)
}
if(plot_country_labels==T){ # add country labels
p <- p + geom_text(data= world_points,aes(x=X, y=Y, label=name, family=country_label_font),color = country_label_colour, size = country_label_size, check_overlap = T)
}
p
dev.off()
ggsave(paste0(here::here(month_current,user),"/",paste(fh,user,sep="_"),".pdf"), p, width = width, height = height, dpi = "retina",limitsize = F)
width
height
write_lines(c(width,height,orientation,paper_size),paste0(here::here(month_current,user),"/",paste(fh),".txt"),append = T)
ggsave(paste0(here::here(month_current,user),"/",paste(user,"final",sep="_"),".pdf"), p, width = height, height = width, dpi = "retina",limitsize = F)
cat("paper =", paper_size,"\nwidth = ", width, "\nheight = ", height)
if(paper_size == "a4"){
width <- 21
height <- 29.7
}
if(paper_size == "a3"){
width <- 29.7
height <- 42
}
if(paper_size == "a2"){
width <- 42
height <- 59.4
}
if(paper_size == "a1"){
width <- 59.4
height <- 84.1
}
if(paper_size == "letter"){
width <- 21.6
height <- 27.9
}
if(paper_size == "legal"){
width <- 21.6
height <- 35.6
}
cat("paper =", paper_size,"\nwidth = ", width, "\nheight = ", height)
page_dims
page_dims <- tibble(
"paper"=as.character(),
"width"=as.numeric(),
"height"=as.numeric(),
"proportion"=as.numeric()
)
require(tibble)
page_dims <- tibble(
"paper"=as.character(),
"width"=as.numeric(),
"height"=as.numeric(),
"proportion"=as.numeric()
)
page_dims <- tibble(
"paper"=c("a4","a3","a2","a1","letter","legal"),
"width"=c(21,29.7,42,59.4,21.6,21.6),
"height"=c(29.7,42,59.4,84.1,27.9,35.6),
"proportion"=c()
)
page_dims
page_dims <- tibble(
"paper"=c("a4","a3","a2","a1","letter","legal"),
"width"=c(21,29.7,42,59.4,21.6,21.6),
"height"=c(29.7,42,59.4,84.1,27.9,35.6),
)
page_dims <- tibble(
"paper"=c("a4","a3","a2","a1","letter","legal"),
"width"=c(21,29.7,42,59.4,21.6,21.6),
"height"=c(29.7,42,59.4,84.1,27.9,35.6)
)
page_dims
require(dplyr)
page_dims <- page_dims %>%
mutate(proportion = height/width)
page_dims
?ggsave
??ggsave
page_dims
51.22/1.4
55.3/1.4
??ggsave
height
plot_final_pdf <- F
source("funcs/user_read_func.R") # load user and map details
source("funcs/page_print_func.R") # load page print func
source("funcs/add_font_func.R") # load font lib func
# packages  ---------------------------------------------------------------
require(here)
# here::set_here("/Users/malishev/Documents/ecolab/")
# pcks
pacman::p_load(here,sf,RColorBrewer,dplyr,ggmap,RgoogleMaps,sp,maptools,scales,rgdal,ggplot2,jsonlite,readr,devtools,colorspace,mapdata,ggsn,mapview,mapproj,ggthemes,reshape2,grid,rnaturalearth,rnaturalearthdata,ggtext,purrr)
# install RgoogleMaps and OpenStreetMap separately, for some reason
# install.packages("RgoogleMaps"); library(RgoogleMaps)
# install.packages("OpenStreetMap"); library(OpenStreetMap)
# install.packages("googleway") ; library(googleway)
# install.packages("rnaturalearth")
# install.packages("rnaturalearthdata")
#
# # install geojsonio from github and source
# devtools::install_github("ropensci/geojsonio"); library(geojsonio)
# high res map version
# https://hecate.hakai.org/rguide/mapping-in-r.html
require(mapdata) # high res data
require(ggsn) # north symbols and scale bars
# load world latlon, region, country names --------------------------------
# get city names
data(world.cities) # /maps
world_cities <- world.cities
readr::write_csv(city_df,here::here(month_current,user,paste0(fh,".csv")))
# get city names
data(world.cities) # /maps
world_cities <- world.cities
# get country names
world <- ne_countries(scale = "large", returnclass = "sf") # /rnaturalearth /rnaturalearthdata
world_points<- st_centroid(world) # /sf
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
world %>% class
st_centroid(world$geometry)
# data(us.cities) # option 2 for us cities
# find missing cities
find_city <- NULL
if(!is.null(find_city)){
find_city_save <- world_cities[str_which(world_cities$name,c(find_city)),"name"]
find_city_save
sites[5] <- find_city_save[2] # replace missing city in df
}
# load data  --------------------------------------------------------------
city_df <- world_cities %>%
filter(country.etc %in% countries, name %in% sites) %>%
select(lat = lat,
lon = long,
city = name
) %>%
arrange(match(city,sites))   # reorder to match route path
# remove extra cities if necessary
# city_df <- city_df[-c(4,7),]
readr::write_csv(city_df,here::here(month_current,user,paste0(fh,".csv")))
label_nudge <- data.frame( # global xy nudge positions, positions 0 to 7
"x" = c(0,0.1,0.1,0.1,0,-0.1,-0.1,-0.1),
"y" = c(0.1,0.1,0,-0.1,-0.1,-0.1,0,0.1)
)
# add nudge xy cols
city_df <- city_df %>%
mutate(nudge_x = rep(0,length(city)), # add xy nudge for labels
nudge_y = rep(0.1,length(city)),
hjust = rep(1,length(city)),
vjust = rep(0.5,length(city)))
# ----------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------
# read in kml data data ------------------------------------------------------------
# read in kml data from my google maps (drive route)
path <- sf::st_read(here::here(month_current,user,paste0(fh,".kml")))
# high res map
d <- map_data("worldHires"
# , countries # select which countries to plot
)
usa <- map_data("worldHires",
c("USA","Canada","Mexico")
# , countries # select which countries to plot
)
# nudge labels ------------------------------------------------------------
add_label_box = F
# add text label positioning column
cat(rep("\n",3), "Total no. of cities = ",city_df$lat %>% length)
set_label_nudge <- c(1,7,7,7,7,6,7,7,8)
city_df[,c("nudge_x","nudge_y")] <- c(
label_nudge[set_label_nudge,] * 2
)
city_df[9,"city"] <- "Ho Chi Minh"
city_df
fontlib
# point params
city_size <- 6
path_size <- 2
# map title params
map_title <- "Saigon to Hanoi"
map_title_colour <- "white"
map_title_size <- 35
map_subtitle <- "Motorcycle trip"
title_xy <- "br"
# country params
plot_country_labels <- T
# col params
bg <- "#AAD3D2"
fg <- "#f2e6d8"
border_col <- "#2D6D40"
path_col <- "#001785"
# font params
country_label_font <- fontlib[5]
city_label_font <- fontlib[5]
map_title_font <- fontlib[5]
# label params
country_label_colour <- NA
city_label_size <- 12
country_label_size <- 10
add_label_box <- F
# page params
orientation <- "l"
units = "cm" # "cm" "mm"
paper_size <- "a3"
c("a1","a2","a3","a4","letter","legal")
source("funcs/user_read_func.R") # load user and map details
beyonce_palette(7) %>% cat
source("funcs/page_print_dims.R") # load user and map details
source("funcs/title_xy.R") # load user and map details
page_dims
source("funcs/page_print_dims.R") # load user and map details
source("funcs/title_xy.R") # load user and map details
month_current,user
month_current
user
21.78/15.56
orientation
width
height
unit
units
?device
420asp
asp
res
400/8.3
400/8.33
400/45
420/1
paste0(here::here(month_current,user),"/",paste(fh,user,sep="_"),".pdf")
here::here(month_current,user)
here::here(month_current,user),"/",paste(fh,user,sep="_.pdf")
paste0(here::here(month_current,user),"/",paste(fh,user,sep="_"),".pdf")
orientation
paper_size
graphics.off()
# bbox[1:2] %>% diff
# bbox[3:4] %>% diff
print_func(paper_size,orientation) # print func
# set bbox
# xybuff <- 0 # xybuff for page width/length
# if(orientation=="l"){
#   bbox <- city_df %>% summarise(min(lon)-(xybuff),max(lon)+(xybuff), # addbuffer
#                                 min(lat)-xybuff,max(lat)+xybuff,
#                                 median(c(lat,lon))) %>% unlist
# }else{
#   bbox <- city_df %>% summarise(min(lon)-(xybuff*2),max(lon)+(xybuff * 2), # add buffer
#                                 min(lat)-(xybuff),max(lat)+(xybuff),
#                                 median(c(lat,lon))) %>% unlist
# }
if(orientation=="l"){
bbox <- city_df %>% summarise(mean(lon)-(height/2), # x axis
mean(lon)+(height/2),
mean(lat)-(width/2),
mean(lat)+(width/2)) %>% unlist
}else{
bbox <- city_df %>% summarise(mean(lon)-(width/2), # x axis
mean(lon)+(width/2),
mean(lat)-(height/2),
mean(lat)+(height/2)) %>% unlist
}
# title and subtitle position // title_xy.R
map_title_final <- title_xy_func(title_xy,0,2)
# color palette
# https://studio.mapbox.com/styles/darwinanddavis/cjx3sqa8obnpg1ctdcx5mxan8/edit/#11.15/46.2378/6.1383
# recover default plot margins
theme_nothing()$plot.margin
p <- ggplot() +
geom_polygon(data=usa,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_sf(data=path,color=path_col,size=path_size) + # add path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
# geom_richtext(data=map_title_final,aes(tx,ty,label=title,hjust=hjust,vjust=vjust),color=map_title_colour, family=map_title_font, size = map_title_size, fill = NA, label.color = NA) + # map title
# geom_richtext(data=map_title_final,aes(tx,ty,label=subtitle,hjust=hjust,vjust=vjust),color=map_title_colour, family=map_title_font, size = map_title_size-10, fill = NA, label.color = NA,nudge_y = -1.5) + # map subtitle
# coord_map("mollweide",xlim = c(bbox[1],bbox[2]), ylim = c(bbox[3],bbox[4])) +
coord_sf(xlim = c(bbox[1],bbox[2]), ylim = c(bbox[3],bbox[4])) + # bbox
# coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
theme_nothing() +
theme(panel.grid.major = element_line(colour = bg),
plot.background = element_rect(fill = bg),
axis.text = element_blank(),
axis.ticks.length=unit(0, "null"),
# plot.margin=unit(c(-10,-10,-10,-10),NULL),
panel.ontop = F
) +
labs(x = NULL, y = NULL) +
# no label box
if(add_label_box==F){geom_richtext(data=city_df,aes(lon,lat,label=city,family=city_label_font,hjust=hjust,vjust=vjust), color=path_col, size = city_label_size, fill = NA, label.color = NA, nudge_x = city_df$nudge_x,nudge_y = city_df$nudge_y)
# add label box
}else{
geom_richtext(data=city_df,aes(lon,lat,label=city,family=city_label_font,size=city_label_size, color=path_col,hjust=hjust,vjust=vjust), size = city_label_size, fill = "white", color = path_col, label.color = path_col, label.padding = grid::unit(rep(7.5, 4), "pt"),nudge_x = city_df$nudge_x,nudge_y = city_df$nudge_y)
}
if(plot_country_labels==T){ # add country labels
p <- p + geom_text(data= world_points,aes(x=X, y=Y, label=name, family=country_label_font),color = country_label_colour, size = country_label_size, check_overlap = T)
}
p
dev.off()
paste0(here::here(month_current,user),"/",paste(fh,user,sep="_cow"),".pdf")
cowplot::save_plot(paste0(here::here(month_current,user),"/",paste(fh,user,sep="_"),"_cow.pdf"),p, base_width = 16.5, base_asp = 1.4)
cowplot::save_plot(paste0(here::here(month_current,user),"/",paste(fh,user,sep="_"),"_cow.pdf"),p, base_width = 16.5, base_height = NULL, base_asp = 1.4)
cowplot::save_plot(paste0(here::here(month_current,user),"/",paste(fh,user,sep="_"),"_cow.pdf"),p, ncol=1,nrow=1,base_width = 16.5, base_height = NULL, base_asp = 2.4)
here
ere()
here()
here::here(month_current,user,paste0(paste(fh,user))
)
here::here(month_current,user,paste0(fh,user))
saveRDS(city_df,here::here(month_current,user,".Rda") # save final city_df to dir
)
city_df
paste0(here::here(month_current,user,".Rda"))
paste0(here::here(month_current,user,user,".Rda"))
saveRDS(city_df,paste0(here::here(month_current,user),user,".Rda")) # save final city_df to dir
paste0(here::here(month_current,user),user,".Rda")
paste0(here::here(month_current,user),"/",user,".Rda")
city_df
saveRDS(city_df,paste0(here::here(month_current,user),"/",user,".Rda")) # save final city_df to dir
ff <- readRDS(paste0(here::here(month_current,user),"/",user,".Rda"))
ff
paste0(here::here(month_current,user))
is.null(paste0(here::here(month_current,user)
)
if(!is.null(paste0(here::here(month_current,user),"/",user,".Rda"))){
cat("Reading in saved data")
city_df <- readRDS(paste0(here::here(month_current,user),"/",user,".Rda"))
}
city_df
cat("Reading in final Rda data")
!is.null(paste0(here::here(month_current,user),"/",user,".Rda"))
width
height
width
units
ggsave(paste0(here::here(month_current,user),"/",paste(fh,user,sep="_"),"_final.pdf"), p, width = height, height = width,limitsize = F,units = units)
page_dims
paper
14.5*1.4
page_dims <- tibble(
"paper"=c("a4","a3","a2","a1","letter","legal"),
"width"=c(21,29.7,42,59.4,21.6,21.6),
"height"=c(29.7,42,59.4,84.1,27.9,35.6)
)
pg_cm <- page_dims %>%
mutate(proportion = height/width)
pg_cm
pg_cm %>%
mutate(c(width,height) * 0.393701)
?mutate()
pg_in <- pg_cm %>%
mutate(width=width*0.393701,
height=height*0.393701
)
pg_in
page_dims_list <- list(
"pg_cm" = pg_cm,
"pg_in" = pg_in
)
page_dims_list
page_dims <- list(
"pg_cm" = pg_cm,
"pg_in" = pg_in
)
page_dims
here(month_current,user)
here()
saveRDS(page_dims,paste0(here::here(),"/page_dims.Rda"))
read(paste0(here("funcs"),"/page_dims.Rda"))
readRDS(paste0(here("funcs"),"/page_dims.Rda"))
??gamm
